/*
GL.iNet API

The GL.iNet API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, and returns JSON-encoded responses.

API version: 3.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glinet

import (
	"encoding/json"
)

// RouterLogin struct for RouterLogin
type RouterLogin struct {
	Pwd *string `json:"pwd,omitempty"`
}

// NewRouterLogin instantiates a new RouterLogin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouterLogin() *RouterLogin {
	this := RouterLogin{}
	return &this
}

// NewRouterLoginWithDefaults instantiates a new RouterLogin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouterLoginWithDefaults() *RouterLogin {
	this := RouterLogin{}
	return &this
}

// GetPwd returns the Pwd field value if set, zero value otherwise.
func (o *RouterLogin) GetPwd() string {
	if o == nil || o.Pwd == nil {
		var ret string
		return ret
	}
	return *o.Pwd
}

// GetPwdOk returns a tuple with the Pwd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouterLogin) GetPwdOk() (*string, bool) {
	if o == nil || o.Pwd == nil {
		return nil, false
	}
	return o.Pwd, true
}

// HasPwd returns a boolean if a field has been set.
func (o *RouterLogin) HasPwd() bool {
	if o != nil && o.Pwd != nil {
		return true
	}

	return false
}

// SetPwd gets a reference to the given string and assigns it to the Pwd field.
func (o *RouterLogin) SetPwd(v string) {
	o.Pwd = &v
}

func (o RouterLogin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pwd != nil {
		toSerialize["pwd"] = o.Pwd
	}
	return json.Marshal(toSerialize)
}

type NullableRouterLogin struct {
	value *RouterLogin
	isSet bool
}

func (v NullableRouterLogin) Get() *RouterLogin {
	return v.value
}

func (v *NullableRouterLogin) Set(val *RouterLogin) {
	v.value = val
	v.isSet = true
}

func (v NullableRouterLogin) IsSet() bool {
	return v.isSet
}

func (v *NullableRouterLogin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouterLogin(val *RouterLogin) *NullableRouterLogin {
	return &NullableRouterLogin{value: val, isSet: true}
}

func (v NullableRouterLogin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouterLogin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


