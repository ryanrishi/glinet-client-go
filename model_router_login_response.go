/*
GL.iNet API

The GL.iNet API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, and returns JSON-encoded responses.

API version: 3.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RouterLoginResponse struct for RouterLoginResponse
type RouterLoginResponse struct {
	// Code:   * `0` success   * `-1` invalid user, permission denied or not logged in   * `-4` invalid parameter, value or format   * `-5` no parameter found   * `-6` time out   * `-9` wrong password 
	Code *float32 `json:"code,omitempty"`
	Token *string `json:"token,omitempty"`
}

// NewRouterLoginResponse instantiates a new RouterLoginResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouterLoginResponse() *RouterLoginResponse {
	this := RouterLoginResponse{}
	return &this
}

// NewRouterLoginResponseWithDefaults instantiates a new RouterLoginResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouterLoginResponseWithDefaults() *RouterLoginResponse {
	this := RouterLoginResponse{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RouterLoginResponse) GetCode() float32 {
	if o == nil || o.Code == nil {
		var ret float32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouterLoginResponse) GetCodeOk() (*float32, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RouterLoginResponse) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given float32 and assigns it to the Code field.
func (o *RouterLoginResponse) SetCode(v float32) {
	o.Code = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *RouterLoginResponse) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouterLoginResponse) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *RouterLoginResponse) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *RouterLoginResponse) SetToken(v string) {
	o.Token = &v
}

func (o RouterLoginResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableRouterLoginResponse struct {
	value *RouterLoginResponse
	isSet bool
}

func (v NullableRouterLoginResponse) Get() *RouterLoginResponse {
	return v.value
}

func (v *NullableRouterLoginResponse) Set(val *RouterLoginResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRouterLoginResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRouterLoginResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouterLoginResponse(val *RouterLoginResponse) *NullableRouterLoginResponse {
	return &NullableRouterLoginResponse{value: val, isSet: true}
}

func (v NullableRouterLoginResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouterLoginResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


