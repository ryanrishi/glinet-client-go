/*
GL.iNet API

The GL.iNet API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, and returns JSON-encoded responses.

API version: 3.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RouterHello struct for RouterHello
type RouterHello struct {
	Code *int32 `json:"code,omitempty"`
}

// NewRouterHello instantiates a new RouterHello object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouterHello() *RouterHello {
	this := RouterHello{}
	return &this
}

// NewRouterHelloWithDefaults instantiates a new RouterHello object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouterHelloWithDefaults() *RouterHello {
	this := RouterHello{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RouterHello) GetCode() int32 {
	if o == nil || o.Code == nil {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouterHello) GetCodeOk() (*int32, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RouterHello) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *RouterHello) SetCode(v int32) {
	o.Code = &v
}

func (o RouterHello) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	return json.Marshal(toSerialize)
}

type NullableRouterHello struct {
	value *RouterHello
	isSet bool
}

func (v NullableRouterHello) Get() *RouterHello {
	return v.value
}

func (v *NullableRouterHello) Set(val *RouterHello) {
	v.value = val
	v.isSet = true
}

func (v NullableRouterHello) IsSet() bool {
	return v.isSet
}

func (v *NullableRouterHello) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouterHello(val *RouterHello) *NullableRouterHello {
	return &NullableRouterHello{value: val, isSet: true}
}

func (v NullableRouterHello) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouterHello) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


